|내용 :
.content!= events.content 
| 장소 :
#location-1= events.location
| 시작시간 :
.start=events.startTime
| 끝나는 시간 :
.finish=events.finishTime
| 타입 :
.type=events.eventType
| 토픽 :
.topic=events.eventTopic 
| 티켓 타입 :
.free=events.free
| 티켓 가격 :
.price=events.ticketPrice
| 그룹 :
.price=events.group
| 그룹 설명 :
.price=events.describeGroup
| 최대 참가가능 수 
.limit=events.numLimit


.row
  .col-sm
    .numbers.
        #[span.number.num-participation= events.numParticipation] participations,
        #[span.number.num-reads= events.numReads] reads
    .logs
          each log in logs
            .log
              a.title= log.author.name
    a="participants"
  .col-sm
    .maps
      #map(style='width:500px;height:400px;')
        #map(style='width:500px;height:400px;')
          
          script.
            var mapContainer = document.getElementById('map'), // 지도를 표시할 div
            mapOption = {
                center: new daum.maps.LatLng(33.450701, 126.570667), // 지도의 중심좌표
                level: 3 // 지도의 확대 레벨
              };
              // 지도를 생성합니다
              var map = new daum.maps.Map(mapContainer, mapOption);
              // 주소-좌표 변환 객체를 생성합니다
              var geocoder = new daum.maps.services.Geocoder();
              // 주소로 좌표를 검색합니다
              var loc = document.getElementById("location-1");
              var address = $(loc).text();
              console.log(address);
              geocoder.addressSearch(address, function(result, status) {
              // 정상적으로 검색이 완료됐으면
                if (status === daum.maps.services.Status.OK) {
                  var coords = new daum.maps.LatLng(result[0].y, result[0].x);
                  // 결과값으로 받은 위치를 마커로 표시합니다
                  var marker = new daum.maps.Marker({
                    map: map,
                    position: coords
                });
                // 인포윈도우로 장소에 대한 설명을 표시합니다
                var infowindow = new daum.maps.InfoWindow({
                    content: '<div style="width:150px;text-align:center;padding:6px 0;">' + address + '</div>'
                });
                infowindow.open(map, marker);
                  // 지도의 중심을 결과값으로 받은 위치로 이동시킵니다
                map.setCenter(coords);
              }
            });


  .col-sm
    .author
      | post on #{moment(events.createdAt).format('YYYY-MM-DD')}

      if events.author
        | 
        | by #[a(href=`/users/${events.author.id}`)= events.author.name]
      if currentUser 
        if events.auther == currentUser.name || currentUser.isRoot
          a.btn.btn-sm.btn-outline-secondary(href=`/events/${currentUser._id}/edit`) 
                      | #[i.fa.fa-pencil] Edit
          a.btn.btn-sm.need-confirm-btn.btn-outline-danger(href=`/events/${currentUser._id}?_method=DELETE`)
                      | #[i.fa.fa-trash] Delete
